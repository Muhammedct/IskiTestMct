import requests
from bs4 import BeautifulSoup
import os

# --- BURAYI KENDÄ°NÄ°ZE GÃ–RE DÃœZENLEYÄ°N ---
# Takip etmek istediÄŸiniz ilÃ§eleri ve mahalleleri buraya yazÄ±n.
# EÄŸer bir ilÃ§edeki tÃ¼m mahalleleri takip etmek isterseniz, mahalle listesini boÅŸ bÄ±rakÄ±n: "Ä°lÃ§e AdÄ±": []
# Mahalle adlarÄ±nÄ± Ä°SKÄ°'nin sitesindeki gibi yazmaya Ã¶zen gÃ¶sterin.
TAKIP_EDILEN_BOLGELER = {
    "SARIYER": []
}
# --- DÃœZENLEME SONU ---

# GitHub Actions'tan alacaÄŸÄ±mÄ±z gizli bilgiler
TELEGRAM_BOT_TOKEN = os.environ.get('8009738525:AAFlhuc_25MqbvzqhJOoQ3xu37XpOcBF6MY')
TELEGRAM_CHAT_ID = os.environ.get('1041245012')

ISKI_URL = "https://iski.istanbul/abone-hizmetleri/ariza-kesinti/"

def bildirim_gonder(mesaj):
    """Belirtilen Telegram kanalÄ±na mesaj gÃ¶nderir."""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("Hata: Telegram token veya chat ID bulunamadÄ±.")
        return
        
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": mesaj,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, json=payload)
        if response.status_code == 200:
            print("Bildirim baÅŸarÄ±yla gÃ¶nderildi.")
        else:
            print(f"Bildirim gÃ¶nderilemedi. Hata: {response.text}")
    except Exception as e:
        print(f"Mesaj gÃ¶nderilirken bir istisna oluÅŸtu: {e}")

def kesintileri_kontrol_et():
    """Ä°SKÄ° web sitesini kontrol eder ve ilgili kesintileri bildirir."""
    print("Ä°SKÄ° web sitesi kontrol ediliyor...")
    try:
        response = requests.get(ISKI_URL, timeout=30)
        response.raise_for_status() # HTTP hatasÄ± varsa istisna fÄ±rlat
    except requests.RequestException as e:
        print(f"Web sitesine ulaÅŸÄ±lamadÄ±: {e}")
        return

    soup = BeautifulSoup(response.content, 'html.parser')
    
    # Ä°SKÄ°'nin kesinti listesini iÃ§eren ana bÃ¶lÃ¼mÃ¼ bul
    kesinti_listesi = soup.find('div', class_='bolge-kesinti-list')

    if not kesinti_listesi:
        print("Kesinti listesi bulunamadÄ±. Site yapÄ±sÄ± deÄŸiÅŸmiÅŸ olabilir.")
        return

    bulunan_kesintiler = []
    
    # Her bir kesinti Ã¶ÄŸesini iÅŸle
    for item in kesinti_listesi.find_all('div', class_='kesinti-item'):
        ilce_tag = item.find('h3')
        ilce = ilce_tag.text.strip().upper() if ilce_tag else "Bilinmiyor"

        # Takip listemizdeki bir ilÃ§e mi?
        if ilce in TAKIP_EDILEN_BOLGELER:
            mahalleler_tag = item.find('div', class_='etkilenen-mahalleler')
            kesinti_mahalleleri_str = mahalleler_tag.text.replace("Etkilenen Mahalleler:", "").strip()
            kesinti_mahalleleri = [m.strip().upper() for m in kesinti_mahalleleri_str.split(',')]
            
            takip_edilen_mahalleler = TAKIP_EDILEN_BOLGELER[ilce]
            
            # EÄŸer ilÃ§e iÃ§in Ã¶zel mahalle belirtilmemiÅŸse veya kesinti olan mahallelerden en az biri takip listemizdeyse
            if not takip_edilen_mahalleler or any(m in kesinti_mahalleleri for m in takip_edilen_mahalleler):
                ariza_nedeni_tag = item.find('p', string=lambda t: t and "ArÄ±za Nedeni" in t)
                ariza_nedeni = ariza_nedeni_tag.text.replace("ArÄ±za Nedeni:", "").strip() if ariza_nedeni_tag else "BelirtilmemiÅŸ"

                kesinti_mesaji = (
                    f"<b>ğŸ’§ SU KESÄ°NTÄ°SÄ° BÄ°LDÄ°RÄ°MÄ° ğŸ’§</b>\n\n"
                    f"<b>Ä°lÃ§e:</b> {ilce.title()}\n"
                    f"<b>Mahalleler:</b> {', '.join(m.title() for m in kesinti_mahalleleri)}\n"
                    f"<b>Neden:</b> {ariza_nedeni}"
                )
                bulunan_kesintiler.append(kesinti_mesaji)

    if bulunan_kesintiler:
        print(f"{len(bulunan_kesintiler)} adet ilgili kesinti bulundu.")
        # TÃ¼m bulunan kesintileri tek bir mesajda birleÅŸtir
        full_mesaj = "\n\n---\n\n".join(bulunan_kesintiler)
        bildirim_gonder(full_mesaj)
    else:
        print("Sizi ilgilendiren bir kesinti bulunamadÄ±.")


if __name__ == "__main__":
    kesintileri_kontrol_et()